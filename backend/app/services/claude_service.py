import anthropic
from typing import List, Dict, Any, Optional
from ..config import settings
import json
import logging

logger = logging.getLogger(__name__)

class ClaudeService:
    def __init__(self):
        self.client = anthropic.Anthropic(api_key=settings.CLAUDE_API_KEY)
        self.model = settings.CLAUDE_MODEL

    async def generate_response(
        self,
        prompt: str,
        max_tokens: int = 1000,
        temperature: float = 0.7
    ) -> str:
        """Generate a response using Claude API"""
        try:
            response = self.client.messages.create(
                model=self.model,
                max_tokens=max_tokens,
                temperature=temperature,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        except Exception as e:
            logger.error(f"Error generating Claude response: {e}")
            return "I'm sorry, I'm having trouble processing your request right now."

    async def analyze_content(
        self,
        content: str,
        context: str = ""
    ) -> Dict[str, Any]:
        """Analyze content for moderation purposes"""
        prompt = f"""
        Analyze the following content for moderation purposes:

        Content: {content}
        Context: {context}

        Please provide a JSON response with:
        1. "approved": boolean - whether the content should be approved
        2. "suggestions": array of objects with "type", "message", "suggestion", "severity"
        3. "rule_violations": array of objects with "rule", "description", "severity"
        4. "tone_analysis": object with "friendliness_score" (0-100), "clarity_score" (0-100)

        Be constructive and helpful in your suggestions.
        """

        try:
            response = await self.generate_response(prompt, max_tokens=800)
            # Try to parse JSON response
            try:
                return json.loads(response)
            except json.JSONDecodeError:
                # Fallback if Claude doesn't return valid JSON
                return {
                    "approved": True,
                    "suggestions": [],
                    "rule_violations": [],
                    "tone_analysis": {"friendliness_score": 80, "clarity_score": 80}
                }
        except Exception as e:
            logger.error(f"Error analyzing content: {e}")
            return {
                "approved": True,
                "suggestions": [],
                "rule_violations": [],
                "tone_analysis": {"friendliness_score": 80, "clarity_score": 80}
            }

    async def detect_ai_content(self, content: str) -> Dict[str, Any]:
        """Detect if content is AI-generated"""
        prompt = f"""
        Analyze the following content to determine if it was likely generated by AI:

        Content: {content}

        Please provide a JSON response with:
        1. "is_ai_generated": boolean
        2. "confidence": number between 0 and 1
        3. "indicators": array of strings describing why you think it's AI-generated or not
        4. "recommendations": array of objects with "action" and "reason"

        Look for patterns like:
        - Overly formal or structured language
        - Repetitive phrases or patterns
        - Lack of personal anecdotes or specific details
        - Generic advice without specific examples
        - Perfect grammar and structure
        """

        try:
            response = await self.generate_response(prompt, max_tokens=600)
            try:
                return json.loads(response)
            except json.JSONDecodeError:
                return {
                    "is_ai_generated": False,
                    "confidence": 0.3,
                    "indicators": ["Unable to analyze properly"],
                    "recommendations": [{"action": "review", "reason": "Analysis inconclusive"}]
                }
        except Exception as e:
            logger.error(f"Error detecting AI content: {e}")
            return {
                "is_ai_generated": False,
                "confidence": 0.3,
                "indicators": ["Analysis failed"],
                "recommendations": [{"action": "review", "reason": "Analysis failed"}]
            }

    async def generate_subreddit_config(
        self,
        name: str,
        description: str,
        topics: List[str],
        moderation_style: str = "moderate"
    ) -> Dict[str, Any]:
        """Generate subreddit configuration"""
        prompt = f"""
        Generate a complete subreddit configuration for:
        - Name: {name}
        - Description: {description}
        - Topics: {', '.join(topics)}
        - Moderation Style: {moderation_style}

        Please provide a JSON response with:
        1. "display_name": string
        2. "description": string (enhanced version)
        3. "rules": array of objects with "title", "description", "severity"
        4. "moderation_guidelines": string
        5. "auto_moderation_settings": object with boolean flags

        Make it appropriate for the topics and moderation style.
        """

        try:
            response = await self.generate_response(prompt, max_tokens=1000)
            try:
                return json.loads(response)
            except json.JSONDecodeError:
                # Fallback configuration
                return {
                    "display_name": name.title(),
                    "description": description,
                    "rules": [
                        {"title": "Be respectful", "description": "Treat others with respect", "severity": "high"},
                        {"title": "No spam", "description": "No spam or self-promotion", "severity": "high"},
                        {"title": "Stay on topic", "description": "Keep discussions relevant", "severity": "medium"}
                    ],
                    "moderation_guidelines": "Moderate content based on community rules and reddiquette.",
                    "auto_moderation_settings": {
                        "auto_remove_spam": True,
                        "require_approval": False,
                        "content_filters": ["spam", "offensive"]
                    }
                }
        except Exception as e:
            logger.error(f"Error generating subreddit config: {e}")
            return {
                "display_name": name.title(),
                "description": description,
                "rules": [
                    {"title": "Be respectful", "description": "Treat others with respect", "severity": "high"}
                ],
                "moderation_guidelines": "Moderate content appropriately.",
                "auto_moderation_settings": {
                    "auto_remove_spam": True,
                    "require_approval": False,
                    "content_filters": []
                }
            }

    async def search_and_respond(
        self,
        query: str,
        posts: List[Dict[str, Any]],
        comments: List[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """Search through posts and generate a response with citations"""
        if not posts:
            return {
                "response": "I couldn't find any relevant posts to answer your question.",
                "citations": [],
                "sources": []
            }

        # Create context from posts
        context_posts = []
        for post in posts[:5]:  # Limit to top 5 posts
            context_posts.append({
                "title": post.get("title", ""),
                "content": post.get("content", ""),
                "id": post.get("id"),
                "author": post.get("author", {}).get("username", "Unknown"),
                "score": post.get("score", 0)
            })

        context = "\n\n".join([
            f"Post: {p['title']}\nContent: {p['content'][:500]}...\nAuthor: {p['author']}\nScore: {p['score']}"
            for p in context_posts
        ])

        prompt = f"""
        Based on the following posts from a Reddit-like community, answer this question: {query}

        Context posts:
        {context}

        Please provide a JSON response with:
        1. "response": string - your answer to the question
        2. "citations": array of objects with "post_id", "post_title", "relevance_score", "excerpt"
        3. "sources": array of objects with "type", "id", "title", "url"

        Make your response helpful and cite specific posts when relevant. Include excerpts from the posts to support your answer.
        """

        try:
            response = await self.generate_response(prompt, max_tokens=1200)
            try:
                result = json.loads(response)
                # Add proper URLs to sources
                for source in result.get("sources", []):
                    if source["type"] == "post":
                        source["url"] = f"/posts/{source['id']}"
                return result
            except json.JSONDecodeError:
                return {
                    "response": response,
                    "citations": [],
                    "sources": []
                }
        except Exception as e:
            logger.error(f"Error searching and responding: {e}")
            return {
                "response": "I'm sorry, I couldn't process your request right now.",
                "citations": [],
                "sources": []
            }
